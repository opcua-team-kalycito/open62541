#!/bin/bash
# -*- sh -*-

: << =cut

=head1 NAME

load - Plugin to monitor the round trip error of open62541 PubSub application

=head1 CONFIGURATION

=head1 NOTES

If run with the "autoconf"-parameter, give our opinion on whether we
should be run on this system or not. This is optional, and only used
by munin-config. In the case of this plugin, we should most probably
always be included.

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf

=cut

. $MUNIN_LIBDIR/plugins/plugin.sh

# If run with the "autoconf"-parameter, give our opinion on wether we
# should be run on this system or not. This is optinal, and only used by
# munin-config. In the case of this plugin, we should most probably
# always be included.

if [ "$1" = "autoconf" ]; then
        echo yes
        exit 0
fi

if [ "$1" = "config" ]; then
        #Warnings and critical messages can be created using below commands. For now, it has been commented.
        #OPEN62541_LATENCY_WARN=${open62541_latency_warn:=10000}
        #OPEN62541_LATENCY_CRIT=${open62541_latency_crit:=100000}

        # The title of the graph
        echo "graph_title open62541 PubSub Latency - End-to-end missed frames"
        # Arguments to "rrdtool graph". In this case, tell it that the
        # lower limit of the graph is '0', and that 1k=1000 (not 1024)
        echo 'graph_args --base 1000 -l 0'
        # The Y-axis label
        echo 'graph_vlabel Count'
        # We want Cur/Min/Avg/Max unscaled (i.e. 0.42 microseconds instead of
        # 420 millimicroseconds)
        echo 'graph_scale no'
        # Graph category. Defaults to 'other'
        echo 'graph_category network'
        echo 'graph_printf %3.0lf'
        # This one is purely to add an explanation to the web page. The first
        # one is for the graph itself, while the second one is for the
        # individual fields.
        echo 'graph_info PubSub applications are designed to send an incremental counter data from node1 to node2 and the value received at node2 will be again published to node1. If any counter data is missed to be received back in node1, we count it as an error. This graphs shows errors detected when running open62541 PubSub application at 250 us cycle time P2P between two systems.'

        echo 'missedCounter.label Missed counters'
        echo 'missedCounter.info Missed counters in open62541 RTT latency for 5 mins'

        echo 'repeatedCounter.label Repeated counters'
        echo 'repeatedCounter.info Repeated counters in open62541 RTT latency for 5 mins'

        # Last, if run with the "config"-parameter, quit here (don't
        # display any data)
        exit 0
fi

if [ -s /usr/local/src/open62541_pubsub_maxlatency.txt ]; then
        #Obtain the missed and received counters from the open62541_pubsub_maxlatency.txt file
        missedCounter=`cat /usr/local/src/open62541_pubsub_maxlatency.txt |  tr -s " " | cut -d" " -f3`
        repeatedCounter=`cat /usr/local/src/open62541_pubsub_maxlatency.txt |  tr -s " " | cut -d" " -f4`

        echo "missedCounter.value $missedCounter"
        echo "repeatedCounter.value $repeatedCounter"
fi
